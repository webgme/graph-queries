/*globals define, WebGMEGlobal, $*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Mar 14 2017 09:54:31 GMT-0500 (Central Daylight Time).
 */

define([
    'js/Loader/LoaderCircles',
    'text!./templates/GraphDBSearchWidget.html',
    'css!./styles/GraphDBSearchWidget.css'
], function (LoaderCircles, TEMPLATE) {
    'use strict';

    var GraphDBSearchWidget,
        WIDGET_CLASS = 'graph-db-search',
        COLLAPSE_ID_PREFIX = 'graphDBSearchId',
        DISPLY_INC = 50;

    GraphDBSearchWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this._pendingVertices = [];
        this._initialize();

        this._logger.debug('ctor finished');
    };

    GraphDBSearchWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        // Create a dummy header 
        this._el.append(TEMPLATE);

        this._loader = new LoaderCircles({containerElement: this._el});

        this._inputQuery = this._el.find('.input-query');
        this._inputQuery.val("V.has('path', '/1').inE('base').outV");
        this._inputQuery.on('keyup', function (event) {
            if (event.keyCode == 13 && self._okBtn.prop('disabled') === false) {
                // Enter was hit..
                event.stopPropagation();
                event.preventDefault();
                self.onSearchClick();
            }
        });

        this._okBtn = this._el.find('.ok-btn');

        this._errorBadge = this._el.find('.error-badge');
        this._infoBadge = this._el.find('.info-badge');
        this._infoBadge.hide();
        this._errorBadge.hide();

        this._resultContainer = this._el.find('.result-container');

        this._displayControls = this._el.find('.display-more-controls');
        this._displayMore = this._el.find('.display-more');
        this._displayAll = this._el.find('.display-all');

        this._displayControls.hide();

        this._displayMore.on('click', function () {
            self.addPendingVerticies();
        });

        this._displayAll.on('click', function () {
            self.addPendingVerticies(true);
        });

        // Registering to events can be done with jQuery (as normal)
        this._okBtn.on('click', function (event) {
            event.stopPropagation();
            event.preventDefault();
            self.onSearchClick();
        });

        this._infoBadge.on('click', function () {
            $(this).hide();
        })
    };

    GraphDBSearchWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    GraphDBSearchWidget.prototype.onSearchClick = function () {
        var queryStr = this._inputQuery.val();

        this._pendingVertices = [];
        this._displayControls.hide();
        this._okBtn.prop('disabled', true);
        this._errorBadge.hide();
        this._infoBadge.hide();
        this._resultContainer.children().off();
        this._resultContainer.empty();
        this._loader.start();
        this.onSearch('g.' + queryStr);
    };

    /* * * * * * * * Controller callbacks * * * * * * * */

    GraphDBSearchWidget.prototype.onSearchResult = function (err, result) {
        var self = this,
            infoText = '';

        this._okBtn.prop('disabled', false);
        this._loader.stop();
        if (err) {
            this._errorBadge.text(err.message);
            this._errorBadge.show();
        } else {
            infoText = 'Found ' + result.vertices.length + ' node(s) and ' + result.edges.length + ' edge(s).';
            this._infoBadge.text(infoText);
            this._infoBadge.show();
            this._pendingVertices = result.vertices;
            this.addPendingVerticies(false);
        }
    };

    GraphDBSearchWidget.prototype.addPendingVerticies = function (addAll) {
        var i,
            max = addAll ? this._pendingVertices.length : DISPLY_INC,
            objDesc;

        for (i = 0; i < max; i += 1) {
            objDesc = this._pendingVertices.pop();
            if (objDesc) {
                this.addVertex(objDesc);
            } else {
                break;
            }
        }

        if (this._pendingVertices.length > 0) {
            this._displayControls.show();
        } else {
            this._displayControls.hide();
        }
    };

    GraphDBSearchWidget.prototype.addVertex = function (objDesc) {
        var self = this,
            vEl = $('<div/>', {
                class: 'vertex-result'
            });

        vEl.append($('<div/>', {
            class: 'vertex-name user-select-text'
        }).text(objDesc.name));

        vEl.append($('<a/>', {class: 'vertex-path', title: 'Click to select, double click to open'})
            .text('[ ' + objDesc.path + ' ]')
            .on('click', function () {
                self.onNodeClick(objDesc.path);
            })
            .on('dblclick', function () {
                self.onNodeDblClick(objDesc.path);
            })
        );

        vEl.append($('<a/>', {
            class: 'vertex-path',
            'data-toggle': 'collapse',
            href: '#' + self.getIdFromPath(objDesc.path)
        }).text('>'));

        vEl.append($('<pre/>', {
                id: self.getIdFromPath(objDesc.path),
                class: 'collapse user-select-text'
            }).text(JSON.stringify(objDesc, null, 2))
        );

        this._resultContainer.append(vEl);
    };

    GraphDBSearchWidget.prototype.addEmptyResult = function () {
        var self = this,
            vEl = $('<h4/>', {
                class: 'empty-result'
            }).text('No nodes matching the query...');

        this._resultContainer.append(vEl);
    };

    GraphDBSearchWidget.prototype.getIdFromPath = function (path) {
        return COLLAPSE_ID_PREFIX + path.replace(/\//g, '_');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    GraphDBSearchWidget.prototype.destroy = function () {
        this._resultContainer.children().off();
        this._okBtn.off();
        this._loader.destroy();
    };

    GraphDBSearchWidget.prototype.onActivate = function () {
        this._logger.debug('GraphDBSearchWidget has been activated');
    };

    GraphDBSearchWidget.prototype.onDeactivate = function () {
        this._logger.debug('GraphDBSearchWidget has been deactivated');
    };

    return GraphDBSearchWidget;
});
